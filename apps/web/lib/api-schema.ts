/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/programs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List meal programs for an organization or site */
        get: operations["listPrograms"];
        put?: never;
        /**
         * Create or update a meal program
         * @description Creates or updates a meal program with cadence, order windows, subsidy rules, and cutoff settings. The operation is idempotent using the optional program id in the payload.
         */
        post: operations["createProgram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List orders matching filters */
        get: operations["listOrders"];
        put?: never;
        /**
         * Create an order
         * @description Creates a new order for an employee. Validates the 48-hour cutoff and enforces
         *     the maximum group size of 50 per batch. When subsidy applies, the total reflects
         *     discounts and loyalty credits.
         *
         */
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/orders/{id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm an order and create payment intent */
        post: operations["confirmOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/batches/{id}/manifest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve batch prep manifest */
        get: operations["getBatchManifest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/batches/{id}/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate labels for a batch */
        post: operations["generateBatchLabels"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/batches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List batches for providers or admins */
        get: operations["listBatches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/incidents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List reported incidents */
        get: operations["listIncidents"];
        put?: never;
        /** Report an incident */
        post: operations["createIncident"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or redeem a referral code */
        post: operations["createReferral"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List invoices for an organization */
        get: operations["listInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/webhooks/{vendor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Inbound webhook receiver
         * @description Accepts webhooks from Olo, Dispatch, and Uber Direct after signature verification.
         */
        post: operations["receiveVendorWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    "event.batch.locked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch locked notification */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        id: string;
                        /** Format: uri */
                        manifestUrl: string;
                        orders: components["schemas"]["Order"][];
                    };
                };
            };
            responses: never;
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "event.delivery.updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delivery status update */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        deliveryJobId: string;
                        status: components["schemas"]["DeliveryStatus"];
                        proof?: components["schemas"]["Attachment"][];
                    };
                };
            };
            responses: never;
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "event.invoice.created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invoice created notification */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        invoice: components["schemas"]["Invoice"];
                    };
                };
            };
            responses: never;
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "event.incident.opened": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Incident opened notification */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        incident: components["schemas"]["Incident"];
                    };
                };
            };
            responses: never;
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "event.incident.resolved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Incident resolved notification */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        incident: components["schemas"]["Incident"];
                    };
                };
            };
            responses: never;
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        ErrorResponse: {
            error: string;
            code?: string;
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
        ProgramUpsertRequest: {
            id?: string;
            orgId: string;
            siteId: string;
            name: string;
            /** @description Human-readable cadence descriptor. */
            cadence: string;
            orderingWindow: string;
            subsidyRules?: {
                [key: string]: unknown;
            };
            /** @default 48 */
            cutoffHours: number;
            /** @default false */
            loyaltyRequired: boolean;
            slots?: components["schemas"]["ProgramSlotInput"][];
        };
        ProgramSlotInput: {
            id?: string;
            /** Format: date-time */
            serviceDate: string;
            /** Format: date-time */
            windowStart: string;
            /** Format: date-time */
            windowEnd: string;
            /** Format: date-time */
            cutoffAt: string;
            providerId: string;
        };
        ProgramResponse: components["schemas"]["Program"];
        ProgramListResponse: {
            data: components["schemas"]["Program"][];
            nextCursor?: string | null;
        };
        Program: {
            id: string;
            orgId: string;
            siteId: string;
            name: string;
            cadence: string;
            orderingWindow: string;
            subsidyRules?: {
                [key: string]: unknown;
            };
            cutoffHours: number;
            loyaltyRequired?: boolean;
            slots?: components["schemas"]["ProgramSlot"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ProgramSlot: {
            id: string;
            programId: string;
            providerId: string;
            /** Format: date-time */
            serviceDate: string;
            /** Format: date-time */
            windowStart: string;
            /** Format: date-time */
            windowEnd: string;
            /** Format: date-time */
            cutoffAt: string;
        };
        CreateOrderRequest: {
            programSlotId: string;
            userId: string;
            notes?: string;
            /** Format: float */
            tip?: number;
            /** Format: float */
            gratuityPercentage?: number;
            items: components["schemas"]["OrderItemInput"][];
        };
        OrderItemInput: {
            skuId: string;
            quantity: number;
            modifiers?: {
                [key: string]: unknown;
            };
            notes?: string;
        };
        OrderResponse: components["schemas"]["Order"];
        OrderListResponse: {
            data: components["schemas"]["Order"][];
            nextCursor?: string | null;
        };
        OrderConfirmationResponse: {
            order: components["schemas"]["Order"];
            payment: components["schemas"]["PaymentIntent"];
        };
        Order: {
            id: string;
            programSlotId: string;
            userId: string;
            batchId?: string | null;
            status: components["schemas"]["OrderStatus"];
            /** Format: float */
            subtotal: number;
            /** Format: float */
            tip?: number;
            /** Format: float */
            loyaltyDiscount?: number;
            /** Format: float */
            referralCredit?: number;
            /** Format: float */
            paymentFee?: number;
            /** Format: float */
            total: number;
            items?: components["schemas"]["OrderItem"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        OrderItem: {
            id: string;
            orderId: string;
            skuId: string;
            quantity: number;
            modifiers?: {
                [key: string]: unknown;
            };
            notes?: string;
        };
        /** @enum {string} */
        OrderStatus: "PENDING" | "LOCKED" | "BATCHED" | "FULFILLED" | "CANCELED";
        PaymentIntent: {
            /** @enum {string} */
            provider: "square";
            clientSecret: string;
            methodOptions: {
                [key: string]: unknown;
            };
        };
        BatchManifest: {
            batch: components["schemas"]["Batch"];
            items: components["schemas"]["ManifestLine"][];
        };
        ManifestLine: {
            orderId: string;
            skuId: string;
            name: string;
            quantity: number;
            allergens?: string[];
        };
        Batch: {
            id: string;
            programSlotId: string;
            siteId: string;
            providerId: string;
            orgId: string;
            status: components["schemas"]["BatchStatus"];
            /** Format: float */
            deliveryFee: number;
            /** Format: float */
            gratuity?: number;
            /** Format: uri */
            manifestUrl?: string | null;
            labels?: components["schemas"]["Label"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        BatchStatus: "PENDING" | "LOCKED" | "SENT" | "DELIVERED" | "CANCELED";
        BatchListResponse: {
            data: components["schemas"]["Batch"][];
            nextCursor?: string | null;
        };
        LabelGenerationResponse: {
            batchId: string;
            /** Format: uri */
            pdfUrl: string;
            /** Format: uri */
            zplUrl: string;
            /** Format: date-time */
            expiresAt?: string;
        };
        Label: {
            id: string;
            orderId: string;
            name: string;
            item: string;
            allergens?: string[];
            /** Format: uri */
            pdfUrl?: string | null;
            /** Format: uri */
            zplUrl?: string | null;
        };
        IncidentRequest: {
            orderId?: string;
            batchId?: string;
            deliveryJobId?: string;
            category: components["schemas"]["IncidentCategory"];
            severity: components["schemas"]["IncidentSeverity"];
            description: string;
            attachments?: components["schemas"]["Attachment"][];
        };
        IncidentResponse: components["schemas"]["Incident"];
        IncidentListResponse: {
            data: components["schemas"]["Incident"][];
            nextCursor?: string | null;
        };
        Incident: {
            id: string;
            orgId?: string | null;
            orderId?: string | null;
            batchId?: string | null;
            deliveryJobId?: string | null;
            category: components["schemas"]["IncidentCategory"];
            severity: components["schemas"]["IncidentSeverity"];
            description: string;
            attachments?: components["schemas"]["Attachment"][];
            /** @enum {string} */
            status: "open" | "acknowledged" | "resolved";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        IncidentCategory: "MISSING" | "LATE" | "QUALITY" | "OTHER";
        /** @enum {string} */
        IncidentSeverity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
        Attachment: {
            /** Format: uri */
            url: string;
            description?: string;
        };
        ReferralRequest: {
            /** @enum {string} */
            action: "create" | "apply";
            code?: string;
            orgId?: string;
            adminId?: string;
        };
        ReferralResponse: {
            referral: components["schemas"]["Referral"];
        };
        Referral: {
            id: string;
            code: string;
            referrerOrgId?: string | null;
            referrerAdminId?: string | null;
            referredOrgId?: string | null;
            creditIssued?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        InvoiceListResponse: {
            data: components["schemas"]["Invoice"][];
            nextCursor?: string | null;
        };
        Invoice: {
            id: string;
            orgId: string;
            period: components["schemas"]["InvoicePeriod"];
            /** Format: date-time */
            periodStart: string;
            /** Format: date-time */
            periodEnd: string;
            /** Format: float */
            subtotal: number;
            /** Format: float */
            deliveryTotal?: number;
            /** Format: float */
            tipsTotal?: number;
            /** Format: float */
            discountsTotal?: number;
            /** Format: float */
            taxesTotal?: number;
            /** Format: float */
            paymentFees?: number;
            /** Format: float */
            total: number;
            status?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        InvoicePeriod: "WEEK" | "MONTH";
        AttachmentList: components["schemas"]["Attachment"][];
        /** @enum {string} */
        DeliveryStatus: "scheduled" | "en_route" | "delivered" | "canceled";
    };
    responses: {
        /** @description Invalid request body or parameters. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Authentication credentials missing or invalid. */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description User does not have permission for the requested resource. */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Resource not found. */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description Unique key to ensure idempotent processing of write operations. */
        IdempotencyKey: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listPrograms: {
        parameters: {
            query?: {
                org?: string;
                site?: string;
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Program list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramListResponse"];
                };
            };
        };
    };
    createProgram: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProgramUpsertRequest"];
            };
        };
        responses: {
            /** @description Program updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramResponse"];
                };
            };
            /** @description Program created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
        };
    };
    listOrders: {
        parameters: {
            query?: {
                org?: string;
                programSlotId?: string;
                status?: components["schemas"]["OrderStatus"];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderListResponse"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderRequest"];
            };
        };
        responses: {
            /** @description Order created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            /** @description Order violates cutoff or group size */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    confirmOrder: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order confirmed and payment initiated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderConfirmationResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
    getBatchManifest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch manifest payload */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchManifest"];
                    "text/csv": string;
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    generateBatchLabels: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Label job accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelGenerationResponse"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    listBatches: {
        parameters: {
            query?: {
                org?: string;
                providerId?: string;
                status?: components["schemas"]["BatchStatus"];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchListResponse"];
                };
            };
        };
    };
    listIncidents: {
        parameters: {
            query?: {
                org?: string;
                status?: "open" | "acknowledged" | "resolved";
                severity?: components["schemas"]["IncidentSeverity"];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Incident list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncidentListResponse"];
                };
            };
        };
    };
    createIncident: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IncidentRequest"];
            };
        };
        responses: {
            /** @description Incident created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncidentResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
        };
    };
    createReferral: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to ensure idempotent processing of write operations. */
                "Idempotency-Key"?: components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReferralRequest"];
            };
        };
        responses: {
            /** @description Referral created or applied */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReferralResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
        };
    };
    listInvoices: {
        parameters: {
            query: {
                org: string;
                period?: components["schemas"]["InvoicePeriod"];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated invoice list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    receiveVendorWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vendor: "olo" | "dispatch" | "uber";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Webhook accepted for processing */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
        };
    };
}
